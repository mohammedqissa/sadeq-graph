/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.akuma.proj3.views;

import com.akuma.proj3.util.Soundplayer;
import com.akuma.proj3.graph.DAGShortestPath;
import com.akuma.proj3.graph.DijkstraShortestPath;
import com.akuma.proj3.graph.Edge;
import com.akuma.proj3.graph.Graph;
import com.akuma.proj3.graph.Line;
import com.akuma.proj3.graph.PrimMST;
import com.akuma.proj3.graph.Vertex;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Mohammad
 */
public class EditorPage extends javax.swing.JFrame {

    private final int ARR_SIZE = 16;

    boolean state_vertex = false;
    boolean state_edge = false;
    long vertexNo = 1;
    Graph<Integer> myGraph;
    int vertCountForEdge = 0;
    Vertex<Integer> v1;
    Vertex<Integer> v2;
    Point locked = null;
    Vertex<Integer> selectedVertex = null;
    Vertex<Integer> cutVertex = null;
    List<Edge> edgesOfShortestPath = new ArrayList<>();
    boolean saved = false;
    boolean directed = false;
    boolean weighted = false;
    boolean selecting = false;
    boolean deleting = false;
    Point currentMouseLocation;
    Point oldCutVertexLoc;

    boolean x = false;
    private List<Vertex<Integer>> deletedVertexes = new ArrayList<Vertex<Integer>>();

    public EditorPage() {

        initComponents();

        super.addComponentListener(new ComponentAdapter() {
            public void componentMoved(ComponentEvent e) {
                if (locked != null) {
                    EditorPage.this.setLocation(locked);
                }
            }
        });
    }

    public void lockLocation() {
        locked = super.getLocation();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenu = new javax.swing.JPopupMenu();
        menuItemCut = new javax.swing.JMenuItem();
        menuItemPaste = new javax.swing.JMenuItem();
        menuItemDelete = new javax.swing.JMenuItem();
        menuItemShowData = new javax.swing.JMenuItem();
        menuItemEdit = new javax.swing.JMenuItem();
        setupFrame = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        btnSetup = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        radioDirected = new javax.swing.JRadioButton();
        radioUnDirected = new javax.swing.JRadioButton();
        jPanel7 = new javax.swing.JPanel();
        radioWeighted = new javax.swing.JRadioButton();
        radioUnweighted = new javax.swing.JRadioButton();
        btnGrpDirection = new javax.swing.ButtonGroup();
        btnGrpWeight = new javax.swing.ButtonGroup();
        fileOpener = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        panelDraw = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        btnDag1 = new javax.swing.JButton();
        txtResult = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        btnTogVertix = new javax.swing.JToggleButton();
        btnTogEdge = new javax.swing.JToggleButton();
        btnDijkstra = new javax.swing.JButton();
        btnMST = new javax.swing.JButton();
        togBtnDelete = new javax.swing.JToggleButton();
        togBtnSelect = new javax.swing.JToggleButton();
        btnNewGraphInner = new javax.swing.JButton();
        btnLoadGraphInner = new javax.swing.JButton();
        btnSaveGraphInner = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        statusLabel = new javax.swing.JLabel();
        menuBarz = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuNewGraph = new javax.swing.JMenuItem();
        menuNewGraph1 = new javax.swing.JMenuItem();

        menuItemCut.setText("Cut");
        menuItemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCutActionPerformed(evt);
            }
        });
        popMenu.add(menuItemCut);

        menuItemPaste.setText("Paste");
        menuItemPaste.setEnabled(false);
        menuItemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemPasteActionPerformed(evt);
            }
        });
        popMenu.add(menuItemPaste);

        menuItemDelete.setText("Delete");
        menuItemDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemDeleteActionPerformed(evt);
            }
        });
        popMenu.add(menuItemDelete);

        menuItemShowData.setText("Show Data");
        menuItemShowData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemShowDataActionPerformed(evt);
            }
        });
        popMenu.add(menuItemShowData);

        menuItemEdit.setText("Edit Data");
        menuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEditActionPerformed(evt);
            }
        });
        popMenu.add(menuItemEdit);

        setupFrame.setTitle("Setup");

        jPanel5.setBackground(new java.awt.Color(85, 0, 0));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnSetup.setBackground(new java.awt.Color(100, 0, 0));
        btnSetup.setFont(new java.awt.Font("Viking-Normal", 0, 14)); // NOI18N
        btnSetup.setText("Start Drawing");
        btnSetup.setToolTipText("");
        btnSetup.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        btnSetup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetupActionPerformed(evt);
            }
        });

        jPanel6.setBackground(new java.awt.Color(80, 0, 0));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Directed / Undirected", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Viking-Normal", 0, 11))); // NOI18N

        radioDirected.setBackground(new java.awt.Color(80, 0, 0));
        btnGrpDirection.add(radioDirected);
        radioDirected.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        radioDirected.setText("Directed Graph");

        radioUnDirected.setBackground(new java.awt.Color(80, 0, 0));
        btnGrpDirection.add(radioUnDirected);
        radioUnDirected.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        radioUnDirected.setSelected(true);
        radioUnDirected.setText("Undirected Graph");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(radioUnDirected)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(radioDirected)
                .addGap(14, 14, 14))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioDirected)
                    .addComponent(radioUnDirected))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel7.setBackground(new java.awt.Color(80, 0, 0));
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Weighted / Unweighted", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Viking-Normal", 0, 11))); // NOI18N

        radioWeighted.setBackground(new java.awt.Color(80, 0, 0));
        btnGrpWeight.add(radioWeighted);
        radioWeighted.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        radioWeighted.setText("Weighted Graph");

        radioUnweighted.setBackground(new java.awt.Color(80, 0, 0));
        btnGrpWeight.add(radioUnweighted);
        radioUnweighted.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        radioUnweighted.setSelected(true);
        radioUnweighted.setText("Unweighted Graph");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addComponent(radioUnweighted)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(radioWeighted)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radioWeighted)
                    .addComponent(radioUnweighted))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(btnSetup, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSetup, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout setupFrameLayout = new javax.swing.GroupLayout(setupFrame.getContentPane());
        setupFrame.getContentPane().setLayout(setupFrameLayout);
        setupFrameLayout.setHorizontalGroup(
            setupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        setupFrameLayout.setVerticalGroup(
            setupFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        fileOpener.setAcceptAllFileFilterUsed(false);
        fileOpener.setApproveButtonText("Open");
        fileOpener.setApproveButtonToolTipText("Select File");
        fileOpener.setCurrentDirectory(new java.io.File("."));
        fileOpener.setDialogTitle("Choose File containing Equations");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(60, 0, 0));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 0, 0), 4));

        jPanel3.setBackground(new java.awt.Color(58, 0, 0));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(65, 0, 0)));

        panelDraw.setBackground(new java.awt.Color(204, 204, 204));
        panelDraw.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(58, 0, 0), 3, true));
        panelDraw.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        panelDraw.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelDrawMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                panelDrawMouseMoved(evt);
            }
        });
        panelDraw.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                panelDrawMousePressed(evt);
            }
        });

        javax.swing.GroupLayout panelDrawLayout = new javax.swing.GroupLayout(panelDraw);
        panelDraw.setLayout(panelDrawLayout);
        panelDrawLayout.setHorizontalGroup(
            panelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1578, Short.MAX_VALUE)
        );
        panelDrawLayout.setVerticalGroup(
            panelDrawLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 914, Short.MAX_VALUE)
        );

        jLabel2.setFont(new java.awt.Font("Viking-Normal", 0, 24)); // NOI18N
        jLabel2.setText("Shortest Path : ");

        jPanel4.setBackground(new java.awt.Color(55, 0, 0));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnDag1.setBackground(new java.awt.Color(100, 0, 0));
        btnDag1.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        btnDag1.setText("Return To Main Menu");
        btnDag1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnDag1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDag1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDag1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnDag1, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addContainerGap())
        );

        txtResult.setEditable(false);
        txtResult.setBackground(new java.awt.Color(153, 153, 153));
        txtResult.setColumns(20);
        txtResult.setFont(new java.awt.Font("Viking-Normal", 0, 30)); // NOI18N
        txtResult.setRows(5);
        txtResult.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDraw, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 971, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelDraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtResult, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap())
                    .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel2.setBackground(new java.awt.Color(58, 0, 0));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        btnTogVertix.setBackground(new java.awt.Color(100, 0, 0));
        btnTogVertix.setFont(new java.awt.Font("Viking-Normal", 0, 14)); // NOI18N
        btnTogVertix.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/vertex.png"))); // NOI18N
        btnTogVertix.setText("Vertex");
        btnTogVertix.setToolTipText("");
        btnTogVertix.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        btnTogVertix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTogVertixActionPerformed(evt);
            }
        });

        btnTogEdge.setBackground(new java.awt.Color(100, 0, 0));
        btnTogEdge.setFont(new java.awt.Font("Viking-Normal", 0, 14)); // NOI18N
        btnTogEdge.setText("Edge");
        btnTogEdge.setToolTipText("");
        btnTogEdge.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        btnTogEdge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTogEdgeActionPerformed(evt);
            }
        });

        btnDijkstra.setBackground(new java.awt.Color(100, 0, 0));
        btnDijkstra.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        btnDijkstra.setText("Find Shortest Path");
        btnDijkstra.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnDijkstra.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDijkstraActionPerformed(evt);
            }
        });

        btnMST.setBackground(new java.awt.Color(100, 0, 0));
        btnMST.setFont(new java.awt.Font("Viking-Normal", 1, 14)); // NOI18N
        btnMST.setText("Minimum spanning tree");
        btnMST.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnMST.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMSTActionPerformed(evt);
            }
        });

        togBtnDelete.setBackground(new java.awt.Color(100, 0, 0));
        togBtnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/delete.png"))); // NOI18N
        togBtnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        togBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togBtnDeleteActionPerformed(evt);
            }
        });

        togBtnSelect.setBackground(new java.awt.Color(100, 0, 0));
        togBtnSelect.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/select.png"))); // NOI18N
        togBtnSelect.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        togBtnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                togBtnSelectActionPerformed(evt);
            }
        });

        btnNewGraphInner.setBackground(new java.awt.Color(100, 0, 0));
        btnNewGraphInner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/new.png"))); // NOI18N
        btnNewGraphInner.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnNewGraphInner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewGraphInnerActionPerformed(evt);
            }
        });

        btnLoadGraphInner.setBackground(new java.awt.Color(100, 0, 0));
        btnLoadGraphInner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/open.png"))); // NOI18N
        btnLoadGraphInner.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnLoadGraphInner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadGraphInnerActionPerformed(evt);
            }
        });

        btnSaveGraphInner.setBackground(new java.awt.Color(100, 0, 0));
        btnSaveGraphInner.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/save.png"))); // NOI18N
        btnSaveGraphInner.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
        btnSaveGraphInner.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveGraphInnerActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/xx.png"))); // NOI18N

        statusLabel.setFont(new java.awt.Font("Viking-Normal", 1, 16)); // NOI18N
        statusLabel.setText("Unweighted Directed Graph");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnTogVertix, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnNewGraphInner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(btnTogEdge, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(togBtnSelect, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(togBtnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSaveGraphInner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadGraphInner, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnDijkstra, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnMST, javax.swing.GroupLayout.PREFERRED_SIZE, 373, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(43, 43, 43))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNewGraphInner)
                    .addComponent(btnTogVertix, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoadGraphInner))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(togBtnSelect)
                    .addComponent(togBtnDelete)
                    .addComponent(btnSaveGraphInner)
                    .addComponent(btnTogEdge, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnDijkstra, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnMST, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 4, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        menuBarz.setBackground(new java.awt.Color(102, 0, 0));
        menuBarz.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        menuBarz.setForeground(new java.awt.Color(102, 102, 0));
        menuBarz.setFont(new java.awt.Font("Viking-Normal", 0, 12)); // NOI18N

        menuFile.setBackground(new java.awt.Color(102, 0, 0));
        menuFile.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(70, 0, 0)));
        menuFile.setText("File");
        menuFile.setFont(new java.awt.Font("Viking-Normal", 0, 12)); // NOI18N

        menuNewGraph.setBackground(new java.awt.Color(153, 0, 0));
        menuNewGraph.setFont(new java.awt.Font("Viking-Normal", 0, 12)); // NOI18N
        menuNewGraph.setText("New Graph");
        menuNewGraph.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewGraphActionPerformed(evt);
            }
        });
        menuFile.add(menuNewGraph);

        menuNewGraph1.setBackground(new java.awt.Color(153, 0, 0));
        menuNewGraph1.setFont(new java.awt.Font("Viking-Normal", 0, 12)); // NOI18N
        menuNewGraph1.setText("Exit Program");
        menuNewGraph1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuNewGraph1ActionPerformed(evt);
            }
        });
        menuFile.add(menuNewGraph1);

        menuBarz.add(menuFile);

        setJMenuBar(menuBarz);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menuNewGraphActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewGraphActionPerformed
        int ans = -1;
        if (!myGraph.getAllVertexMap().isEmpty() && !saved) {
            ans = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Work Before\nStarting a New Graph?");
        }
        if (ans == JOptionPane.YES_OPTION) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                FileOutputStream fileOutputStream = null;
                try {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileOutputStream = new FileOutputStream(fileToSave.getAbsolutePath());
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                    objectOutputStream.writeObject(myGraph);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fileOutputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        }
        if (ans == JOptionPane.CANCEL_OPTION) {
            return;
        }
        txtResult.setText("");
        edgesOfShortestPath.clear();
        togBtnDelete.setSelected(false);
        togBtnSelect.setSelected(false);
        btnTogEdge.setSelected(false);
        btnTogVertix.setSelected(false);
        state_vertex = false;
        state_edge = false;
        selecting = false;
        deleting = false;
        vertexNo = 1;
        myGraph = new Graph(false);
        vertCountForEdge = 0;
        panelDraw.repaint();
    }//GEN-LAST:event_menuNewGraphActionPerformed

    private void btnTogVertixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTogVertixActionPerformed
        if (btnTogVertix.isSelected()) {
            state_vertex = true;
            state_edge = false;
            selecting = false;
            deleting = false;
            togBtnDelete.setSelected(false);
            togBtnSelect.setSelected(false);
            btnTogEdge.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());
        } else {
            selecting = false;
            state_edge = false;
            state_vertex = false;
            togBtnDelete.setSelected(false);
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_btnTogVertixActionPerformed

    private void btnTogEdgeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTogEdgeActionPerformed
        if (btnTogEdge.isSelected()) {
            state_vertex = false;
            togBtnDelete.setSelected(false);
            togBtnSelect.setSelected(false);
            state_edge = true;

            btnTogVertix.setSelected(false);
            //    btnTogDirectedEdge.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());
        } else {
            selecting = false;
//            state_directedEdge = false;
            state_edge = false;
            state_vertex = false;
            togBtnDelete.setSelected(false);
            //    btnTogDirectedEdge.setSelected(false);
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());
        }
    }//GEN-LAST:event_btnTogEdgeActionPerformed

    private void btnMSTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMSTActionPerformed
        Graphics g = panelDraw.getGraphics();
        g.clearRect(0, 0, panelDraw.getX(), panelDraw.getY());
        panelDraw.paint(g);
        PrimMST prim = new PrimMST();
        List<Edge<Integer>> edges = prim.primMST(myGraph);
        myGraph.setAllEdges(edges);
        drawSpanningTree(edges);

    }//GEN-LAST:event_btnMSTActionPerformed

    private void panelDrawMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMousePressed
        if (evt.getButton() == MouseEvent.BUTTON1) {
            popMenu.setVisible(false);
            if (state_vertex) {
                if (validateForVertex(evt)) {
                    saved = false;
                    Graphics g = panelDraw.getGraphics();
                    g.setColor(new Color(0, 0, 0));
                    g.fillOval(evt.getX() - 30, evt.getY() - 30, 60, 60);
                    g.setColor(new Color(75, 0, 0));
                    g.fillOval(evt.getX() - 30 + 4, evt.getY() - 30 + 4, 52, 52);
                    g.setColor(new Color(0, 0, 0));
                    g.setFont(new Font("Viking-Normal", 25, 25));
                    g.drawString("V" + vertexNo, evt.getX() - 20, evt.getY() + 12);
                    panelDraw.paintComponents(g);
                    //undirected vertix addition
                    myGraph.addSingleVertex(vertexNo, new Point(evt.getX() - 30, evt.getY() - 30));
                    vertexNo++;
                }

            } else if (state_edge) {
                saved = false;
                if (!directed) {
                    if (vertCountForEdge == 0) {
                        v1 = getVertexOfMouseClick(evt);
                        drawSingleVertex(v1, panelDraw.getX(), panelDraw.getY());
                        System.out.println("vertex of id = " + v1.getId() + " has been selected");

                        vertCountForEdge++;
                    } else if (vertCountForEdge == 1) {
                        v2 = getVertexOfMouseClick(evt);
                        if (v2 == null || v2 == v1) {
                            Soundplayer.playSound("error.wav");
                            return;
                        }

                        drawSingleVertex(v2, panelDraw.getX() + 35, panelDraw.getY());
                        System.out.println("vertex of id = " + v2.getId() + " has been selected");
                        int weight = 0;
                        if (weighted) {
                            String w = JOptionPane.showInputDialog("Please Enter Weight For This Edge : ");
                            if(w.equals(""))
                                return;
                            weight = Integer.parseInt(w);
                            
                        }
                        Edge edge = new Edge(v1, v2, new Line(v1.getLocation().x
                                + 30, v1.getLocation().y + 30, v2.getLocation().x + 30, v2.getLocation().y + 30));
                        edge.setWeight(weight);

                        myGraph.addEdge(v1.getId(), v2.getId(), weight, edge.getLine());
                        v1.addAdjacentVertex(edge, v2);
                        v2.addAdjacentVertex(edge, v1);
                        System.out.println("an edge between those two vertexes has been added!");
                        vertCountForEdge = 0;
                        Graphics g = panelDraw.getGraphics();
                        Graphics2D g2 = (Graphics2D) g;
                        g2.setColor(new Color(75, 0, 0));
                        g2.setStroke(new BasicStroke(5));
                        g2.drawLine(edge.getLine().getStartX(), edge.getLine().getStartY(), edge.getLine().getEndX(), edge.getLine().getEndY());
                        g.setColor(new Color(0, 0, 0));
                        g.setFont(new Font("Viking-Normal", 20, 20));
                        if (weighted) {
                            g.drawString("" + edge.getWeight(), (edge.getLine().getEndX() + edge.getLine().getStartX()) / 2 + 5, ((edge.getLine().getEndY() + edge.getLine().getStartY()) / 2) - 3);
                        }
                        g.setFont(new Font("Viking-Normal", 25, 25));
                        g.setColor(new Color(0, 0, 0));
                        g.drawString("V" + v1.getId(), (int) v1.getLocation().getX() + 10, (int) v1.getLocation().getY() + 41);
                        g.drawString("V" + v2.getId(), (int) v2.getLocation().getX() + 10, (int) v2.getLocation().getY() + 41);
                        g2.setColor(new Color(204, 204, 204));
                        g2.fillRect(5, 3, 100, 50);
                        panelDraw.paintComponents(g2);

                    }
                } else if (directed) {
                    if (vertCountForEdge == 0) {
                        v1 = getVertexOfMouseClick(evt);
                        drawSingleVertex(v1, panelDraw.getX(), panelDraw.getY());
                        System.out.println("vertex of id = " + v1.getId() + " has been selected");

                        vertCountForEdge++;
                    } else if (vertCountForEdge == 1) {
                        v2 = getVertexOfMouseClick(evt);
                        if (v2 == null || v2 == v1) {
                            Soundplayer.playSound("error.wav");
                            return;
                        }
                        drawSingleVertex(v2, panelDraw.getX() + 35, panelDraw.getY());
                        System.out.println("vertex of id = " + v2.getId() + " has been selected");
                        int weight = 0;
                        if (weighted) {
                            weight = Integer.parseInt(JOptionPane.showInputDialog("Please Enter Weight For This Edge : "));
                        }
                        Edge edge = new Edge(v1, v2, new Line(v1.getLocation().x
                                + 30, v1.getLocation().y + 30, v2.getLocation().x + 30, v2.getLocation().y + 30));
                        edge.setWeight(weight);
                        v1.addAdjacentVertex(edge, v2);
                        v2.addAdjacentVertex(edge, v1);
                        edge.setIsDirected(true);

                        myGraph.addEdge(v1.getId(), v2.getId(), weight, edge.getLine());

                        System.out.println("an edge between those two vertexes has been added!");
                        vertCountForEdge = 0;
                        Graphics g = panelDraw.getGraphics();
                        Graphics2D g2 = (Graphics2D) g;
                        g2.setColor(new Color(75, 0, 0));
                        g2.setStroke(new BasicStroke(5));
                        drawArrow(g2, edge.getLine().getStartX(), edge.getLine().getStartY(), edge.getLine().getEndX(), edge.getLine().getEndY(), edge.getLine().color);
                        g.setColor(new Color(0, 0, 0));
                        g.setFont(new Font("Viking-Normal", 20, 20));
                        if (weighted) {
                            g.drawString("" + edge.getWeight(), (edge.getLine().getEndX() + edge.getLine().getStartX()) / 2 + 5, ((edge.getLine().getEndY() + edge.getLine().getStartY()) / 2) - 3);
                        }
                        g.setFont(new Font("Viking-Normal", 25, 25));
                        g.setColor(new Color(0, 0, 0));
                        g.drawString("V" + v1.getId(), (int) v1.getLocation().getX() + 10, (int) v1.getLocation().getY() + 41);
                        g.drawString("V" + v2.getId(), (int) v2.getLocation().getX() + 10, (int) v2.getLocation().getY() + 41);
                        g2.setColor(new Color(204, 204, 204));
                        g2.fillRect(5, 3, 100, 50);
                        panelDraw.paintComponents(g2);
                        //attachEdges();
                    }

                }

            } else if (selecting) {
                try {
                    if (this.selectedVertex != null) {
                        drawSingleVertex(this.selectedVertex);
                    }
                    this.selectedVertex = getVertexOfMouseClick(evt);

                    drawSelectedSingleVertex(this.selectedVertex);
                } catch (NullPointerException e) {
                    Soundplayer.playSound("error.wav");
                    return;
                }
            } else if (deleting) {
                Vertex v = getVertexOfMouseClick(evt);
                if (v == null) {
                    Soundplayer.playSound("error.wav");
                    return;
                }

                deletedVertexes.add(myGraph.deleteVertex(v.getId()));

                saved = false;
                Graphics g = panelDraw.getGraphics();
                g.clearRect(0, 0, panelDraw.getX(), panelDraw.getY());
                txtResult.setText("");
                edgesOfShortestPath.clear();
                panelDraw.paint(g);
                if (!myGraph.isDirected) {
                    drawGraph(myGraph);
                } else if (myGraph.isDirected) {
                    drawDirectedGraph(myGraph);
                }
            }

    }//GEN-LAST:event_panelDrawMousePressed
    else {
            Vertex v = getVertexOfMouseClick(evt);
            popMenu.setVisible(true);
            popMenu.setLocation(evt.getLocationOnScreen());
        }
    }
    private void btnDijkstraActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDijkstraActionPerformed
        try {
            edgesOfShortestPath.clear();
            txtResult.setText("");

            if (!directed) {
                DijkstraShortestPath dj = new DijkstraShortestPath();
                int sourceV = Integer.parseInt(JOptionPane.showInputDialog("Please Enter ID of Source Vertex : "));
                int distV = Integer.parseInt(JOptionPane.showInputDialog("Please Enter ID of Destination Vertex : "));
                Map<Vertex<Integer>, Integer> distances = dj.shortestPath(myGraph, myGraph.getVertex(sourceV));
                Map<Vertex<Integer>, Vertex<Integer>> parent = dj.getParent();
                ArrayList<Integer> shortestPath = new ArrayList<>();

                shortestPath.add(distV);
                long id = parent.get(myGraph.getVertex(distV)).getId();

                do {
                    if (parent.get(myGraph.getVertex(id)) == null) {
                        break;
                    }
                    shortestPath.add((int) id);
                    Vertex v = parent.get(myGraph.getVertex(id));
                    id = v.getId();

                } while (parent.get(myGraph.getVertex(id)) != null);
                shortestPath.add(sourceV);
                int size = shortestPath.size();
                txtResult.append("( ");

                for (int i = size - 1; i > 0; i--) {

                    txtResult.append("V(" + shortestPath.get(i) + ") -> ");
                }
                txtResult.append("V(" + shortestPath.get(0) + ") cost : " + distances.get(myGraph.getVertex(distV)));
                Collections.reverse(shortestPath);
                for (int i = 0; i < size - 1; i++) {
                    for (Edge edge : myGraph.getAllEdges()) {
                        if ((edge.getVertex1().getId() == shortestPath.get(i) && edge.getVertex2().getId() == shortestPath.get(i + 1))
                                || (edge.getVertex2().getId() == shortestPath.get(i) && edge.getVertex1().getId() == shortestPath.get(i + 1))) {
                            edgesOfShortestPath.add(edge);
                        }
                    }
                }
                if (!myGraph.isDirected) {
                    drawGraph(myGraph);
                } else if (myGraph.isDirected) {
                    drawDirectedGraph(myGraph);
                }
            } else if (directed) {
                if (checkCycle()) {
                    int ansz = JOptionPane.showConfirmDialog(null, "Cycle Found In Graph!\nAre you sure you want to proceed ? problems may occur!", "Warning!", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                    if (ansz == JOptionPane.NO_OPTION) {
                        return;
                    }
                }
                DAGShortestPath dag = new DAGShortestPath();
                int sourceV = 0;
                int distV = 0;
                String sv = JOptionPane.showInputDialog("Please Enter ID of Source Vertex : ");
                if (sv.equals("")) {
                    return;
                }
                sourceV = Integer.parseInt(sv);
                String dv = JOptionPane.showInputDialog("Please Enter ID of Destination Vertex : ");
                if (dv.equals("")) {
                    return;
                }
                distV = Integer.parseInt(dv);

                Map<Vertex<Integer>, Integer> distances = dag.shortestPath(myGraph, myGraph.getVertex(sourceV), deletedVertexes);
                Map<Vertex<Integer>, Vertex<Integer>> parent = dag.getParent();
                ArrayList<Integer> shortestPath = new ArrayList<>();

                shortestPath.add(distV);

                long id = parent.get(myGraph.getVertex(distV)).getId();

                do {
                    if (parent.get(myGraph.getVertex(id)) == null) {
                        break;
                    }

                    shortestPath.add((int) id);

                    Vertex v = parent.get(myGraph.getVertex(id));

                    id = v.getId();

                } while (parent.get(myGraph.getVertex(id)) != null);
                shortestPath.add(sourceV);
                int size = shortestPath.size();
                txtResult.setText("( ");

                for (int i = size - 1; i > 0; i--) {

                    txtResult.append(shortestPath.get(i) + " -> ");
                }
                txtResult.append(shortestPath.get(0) + " ) cost : " + distances.get(myGraph.getVertex(distV)));
                for (int i = 0; i < size - 1; i++) {
                    for (Edge edge : myGraph.getAllEdges()) {
                        if ((edge.getVertex1().getId() == shortestPath.get(i) && edge.getVertex2().getId() == shortestPath.get(i + 1))
                                || (edge.getVertex2().getId() == shortestPath.get(i) && edge.getVertex1().getId() == shortestPath.get(i + 1))) {
                            edgesOfShortestPath.add(edge);
                        }
                    }
                }
                if (!myGraph.isDirected) {
                    drawGraph(myGraph);
                } else if (myGraph.isDirected) {
                    drawDirectedGraph(myGraph);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Make sure vertex ID you entered is correct!", "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnDijkstraActionPerformed

    private void panelDrawMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseMoved

        currentMouseLocation = new Point(evt.getX(), evt.getY());
    }//GEN-LAST:event_panelDrawMouseMoved

    private void btnDag1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDag1ActionPerformed
        int ans = -1;
        if (!myGraph.getAllVertexMap().isEmpty() && !saved) {
            ans = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Work Before\nStarting a New Graph?");
        }
        if (ans == JOptionPane.YES_OPTION) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                FileOutputStream fileOutputStream = null;
                try {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileOutputStream = new FileOutputStream(fileToSave.getAbsolutePath());
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                    objectOutputStream.writeObject(myGraph);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fileOutputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        }
        if (ans == JOptionPane.CANCEL_OPTION) {
            return;
        }
        txtResult.setText("");
        edgesOfShortestPath.clear();
        this.dispose();
    }//GEN-LAST:event_btnDag1ActionPerformed

    private void togBtnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togBtnSelectActionPerformed
        if (togBtnSelect.isSelected()) {
            selecting = true;
            state_edge = false;
            state_vertex = false;
            deleting = false;
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            togBtnDelete.setSelected(false);
            panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                    new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/mousePointers/select.png")).getImage(),
                    new Point(0, 0), "custom cursor"));
        } else {
            deleting = false;
            selecting = false;
            state_edge = false;
            state_vertex = false;
            togBtnDelete.setSelected(false);
//            btnTogDirectedEdge.setSelected(false);
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());

        }
        {
        }
    }//GEN-LAST:event_togBtnSelectActionPerformed

    private void togBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_togBtnDeleteActionPerformed
        if (togBtnDelete.isSelected()) {
            deleting = true;
            selecting = false;
            state_edge = false;
            state_vertex = false;
            togBtnSelect.setSelected(false);
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            panelDraw.setCursor(Toolkit.getDefaultToolkit().createCustomCursor(
                    new javax.swing.ImageIcon(getClass().getResource("/com/akuma/proj3/img/mousePointers/delete.png")).getImage(),
                    new Point(0, 0), "custom cursor"));
        } else {

            selecting = false;
            state_edge = false;
            state_vertex = false;
            togBtnDelete.setSelected(false);
            btnTogEdge.setSelected(false);
            btnTogVertix.setSelected(false);
            panelDraw.setCursor(Cursor.getDefaultCursor());

        }
        {
        }
    }//GEN-LAST:event_togBtnDeleteActionPerformed

    private void menuItemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCutActionPerformed

        if (selectedVertex == null) {
            return;
        }

        cutVertex = myGraph.deleteVertex(selectedVertex.getId());
        cutVertex.setLocation(oldCutVertexLoc);
        if (cutVertex == null) {
            return;
        }
        menuItemPaste.setEnabled(true);
        selectedVertex = null;
        Graphics g = panelDraw.getGraphics();
        g.clearRect(0, 0, panelDraw.getX(), panelDraw.getY());
        panelDraw.paint(g);
        if (!myGraph.isDirected) {
            drawGraph(myGraph);
        } else if (myGraph.isDirected) {
            drawDirectedGraph(myGraph);
        }
        popMenu.setVisible(false);

    }//GEN-LAST:event_menuItemCutActionPerformed

    private void menuItemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemPasteActionPerformed
        oldCutVertexLoc = currentMouseLocation;
        if (cutVertex != null) {
            cutVertex.setLocation(oldCutVertexLoc);
            myGraph.addSingleVertex(cutVertex.getId(), cutVertex.getLocation());
            drawSingleVertex(cutVertex);
            cutVertex = null;
        }
        menuItemPaste.setEnabled(false);
        popMenu.setVisible(false);
    }//GEN-LAST:event_menuItemPasteActionPerformed

    private void menuItemDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemDeleteActionPerformed
        JOptionPane.showMessageDialog(null, "About to delete vertex " + selectedVertex.getId());
        if (selectedVertex == null) {
            return;
        }

        myGraph.deleteVertex(selectedVertex.getId());
        selectedVertex = null;
        Graphics g = panelDraw.getGraphics();
        g.clearRect(0, 0, panelDraw.getX(), panelDraw.getY());
        panelDraw.paint(g);
        if (!myGraph.isDirected) {
            drawGraph(myGraph);
        } else if (myGraph.isDirected) {
            drawDirectedGraph(myGraph);
        }
        popMenu.setVisible(false);
    }//GEN-LAST:event_menuItemDeleteActionPerformed

    private void btnSetupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetupActionPerformed
        String status = "";

        if (radioDirected.isSelected()) {
            btnMST.setEnabled(false);
            status += "Directed / ";
            directed = true;
            myGraph = new Graph<Integer>(true);
        } else if (radioUnDirected.isSelected()) {
            status += "UnDirected / ";
            directed = false;
            myGraph = new Graph<Integer>(false);
        }
        if (radioWeighted.isSelected()) {
            status += "Weighted Graph";
            myGraph.isWeighted = true;
            weighted = true;
        } else if (radioUnweighted.isSelected()) {
            status += "UnWeighted Graph";
            myGraph.isWeighted = false;
            weighted = false;
        }
        statusLabel.setText(status);

        this.setVisible(true);
        setupFrame.dispose();
    }//GEN-LAST:event_btnSetupActionPerformed

    private void btnLoadGraphInnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadGraphInnerActionPerformed
        FileInputStream fileInputStream = null;
        try {
            int userSelection = this.fileOpener.showOpenDialog(this);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File inputFile = new File(this.fileOpener.getSelectedFile().getAbsolutePath());
                fileInputStream = new FileInputStream(inputFile);
                ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream);
                myGraph = (Graph) objectInputStream.readObject();
                vertexNo = myGraph.lastId;

                if (myGraph.isWeighted) {
                    weighted = true;
                }
                JOptionPane.showMessageDialog(null, "Graph Loaded Successfuly!");
                if (!myGraph.isDirected) {
                    drawGraph(myGraph);
                } else if (myGraph.isDirected) {
                    drawDirectedGraph(myGraph);
                }
            }
        } catch (Exception ex) {
        } finally {
            try {
                fileInputStream.close();
            } catch (Exception ex) {
                Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_btnLoadGraphInnerActionPerformed

    private void btnSaveGraphInnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveGraphInnerActionPerformed

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");
        fileChooser.setCurrentDirectory(new java.io.File("."));

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            FileOutputStream fileOutputStream = null;
            try {
                File fileToSave = fileChooser.getSelectedFile();
                fileOutputStream = new FileOutputStream(fileToSave.getAbsolutePath());
                ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                objectOutputStream.writeObject(myGraph);
                saved = true;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    fileOutputStream.close();
                } catch (IOException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }

    }//GEN-LAST:event_btnSaveGraphInnerActionPerformed

    private void btnNewGraphInnerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewGraphInnerActionPerformed
        int ans = -1;
        if (!myGraph.getAllVertexMap().isEmpty() && !saved) {
            ans = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Work Before\nStarting a New Graph?");
        }
        if (ans == JOptionPane.YES_OPTION) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                FileOutputStream fileOutputStream = null;
                try {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileOutputStream = new FileOutputStream(fileToSave.getAbsolutePath());
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                    objectOutputStream.writeObject(myGraph);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fileOutputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        }
        if (ans == JOptionPane.CANCEL_OPTION) {
            return;
        }
        txtResult.setText("");
        edgesOfShortestPath.clear();
        togBtnDelete.setSelected(false);
        togBtnSelect.setSelected(false);
        btnTogEdge.setSelected(false);
        btnTogVertix.setSelected(false);
        state_vertex = false;
        state_edge = false;
        selecting = false;
        deleting = false;
        vertexNo = 1;
        if (!myGraph.isDirected) {
            myGraph = new Graph(true);
        } else if (myGraph.isDirected) {
            myGraph = new Graph(false);
        }

        vertCountForEdge = 0;
        panelDraw.repaint();
    }//GEN-LAST:event_btnNewGraphInnerActionPerformed

    private void panelDrawMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelDrawMouseDragged
        try {
            if (selecting) {
                if (!panelDraw.contains(evt.getPoint())) {
                    return;
                }
                selectedVertex.setLocation(new Point(evt.getX() - 30, evt.getY() - 30));

                System.err.println(selectedVertex.getId() + " | " + selectedVertex.getEdges());
                List<Edge<Integer>> edges = selectedVertex.getEdges();
                for (Edge edge : selectedVertex.getEdges()) {
                    Line line = edge.getLine();
                    if (edge.getVertex1().getId() == selectedVertex.getId()) {
                        line.setStartX(selectedVertex.getLocation().x + 30);
                        line.setStartY(selectedVertex.getLocation().y + 30);
                        edge.setLine(line);
                    }
                    if (edge.getVertex2().getId() == selectedVertex.getId()) {
                        line.setEndX(selectedVertex.getLocation().x + 30);
                        line.setEndY(selectedVertex.getLocation().y + 30);
                        edge.setLine(line);
                    }
                }
                Graphics g = panelDraw.getGraphics();
                g.clearRect(0, 0, panelDraw.getX(), panelDraw.getY());
                panelDraw.paint(g);
                if (!myGraph.isDirected) {
                    drawGraph(myGraph);
                } else if (myGraph.isDirected) {
                    drawDirectedGraph(myGraph);
                }
            }
        } catch (Exception e) {
        }

    }//GEN-LAST:event_panelDrawMouseDragged

    private void menuItemShowDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemShowDataActionPerformed
        popMenu.setVisible(false);
        if (selecting) {
            if (selectedVertex == null) {
                return;
            }
            JOptionPane.showMessageDialog(null, "(V" + selectedVertex.getId() + ") Data is : " + selectedVertex.getData());
        }
    }//GEN-LAST:event_menuItemShowDataActionPerformed

    private void menuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEditActionPerformed
        popMenu.setVisible(false);
        if (selecting) {
            try {
                if (selectedVertex == null) {
                    return;
                }
                Integer data = Integer.parseInt(JOptionPane.showInputDialog(null, "Please Insert New Data For (V" + selectedVertex.getId() + ")"));
                selectedVertex.setData(data);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Wrong Data Format!", "Error!", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_menuItemEditActionPerformed

    private void menuNewGraph1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuNewGraph1ActionPerformed
        int ans = -1;
        if (!myGraph.getAllVertexMap().isEmpty() && !saved) {
            ans = JOptionPane.showConfirmDialog(null, "Would You Like To Save Your Work Before\nStarting a New Graph?");
        }
        if (ans == JOptionPane.YES_OPTION) {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Specify a file to save");

            int userSelection = fileChooser.showSaveDialog(this);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                FileOutputStream fileOutputStream = null;
                try {
                    File fileToSave = fileChooser.getSelectedFile();
                    fileOutputStream = new FileOutputStream(fileToSave.getAbsolutePath());
                    ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream);
                    objectOutputStream.writeObject(myGraph);
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                } finally {
                    try {
                        fileOutputStream.close();
                    } catch (IOException ex) {
                        Logger.getLogger(EditorPage.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

            }

        }
        if (ans == JOptionPane.CANCEL_OPTION) {
            return;
        }
        System.exit(1);
    }//GEN-LAST:event_menuNewGraph1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDag1;
    private javax.swing.JButton btnDijkstra;
    private javax.swing.ButtonGroup btnGrpDirection;
    private javax.swing.ButtonGroup btnGrpWeight;
    private javax.swing.JButton btnLoadGraphInner;
    javax.swing.JButton btnMST;
    private javax.swing.JButton btnNewGraphInner;
    private javax.swing.JButton btnSaveGraphInner;
    private javax.swing.JToggleButton btnSetup;
    private javax.swing.JToggleButton btnTogEdge;
    private javax.swing.JToggleButton btnTogVertix;
    private javax.swing.JFileChooser fileOpener;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JMenuBar menuBarz;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenuItem menuItemCut;
    private javax.swing.JMenuItem menuItemDelete;
    private javax.swing.JMenuItem menuItemEdit;
    private javax.swing.JMenuItem menuItemPaste;
    private javax.swing.JMenuItem menuItemShowData;
    private javax.swing.JMenuItem menuNewGraph;
    private javax.swing.JMenuItem menuNewGraph1;
    private javax.swing.JPanel panelDraw;
    private javax.swing.JPopupMenu popMenu;
    private javax.swing.JRadioButton radioDirected;
    private javax.swing.JRadioButton radioUnDirected;
    private javax.swing.JRadioButton radioUnweighted;
    private javax.swing.JRadioButton radioWeighted;
    public javax.swing.JFrame setupFrame;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JToggleButton togBtnDelete;
    private javax.swing.JToggleButton togBtnSelect;
    private javax.swing.JTextArea txtResult;
    // End of variables declaration//GEN-END:variables

    private Vertex<Integer> getVertexOfMouseClick(MouseEvent evt) {
        try {
            HashMap<Long, Vertex<Integer>> vertexMap = (HashMap<Long, Vertex<Integer>>) myGraph.getAllVertexMap();

            Iterator it = vertexMap.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry pair = (Map.Entry) it.next();
                Vertex<Integer> v = (Vertex<Integer>) pair.getValue();
                if (v == null) {
                    //do nothing
                } else if ((evt.getX() > v.getLocation().x && evt.getX() < v.getLocation().x + 60)
                        && (evt.getY() > v.getLocation().y && evt.getY() < v.getLocation().y + 60)) {
                    return v;
                } else {
//                it.remove(); // avoids a ConcurrentModificationException
                }
            }
        } catch (Exception e) {
        }

        return null;
    }

    private void debug(String string) {
        System.err.println("[DEBUG] : " + this.getClass().getName() + " => [MESSAGE] : " + string);
    }

    void drawGraph(Graph graph) {
        drawEdges(graph.getAllEdges());
        drawVertexes(graph.getAllVertexMap());

    }

    void drawDirectedGraph(Graph graph) {
        drawDirectedEdges(graph.getAllEdges());
        drawVertexes(graph.getAllVertexMap());

    }

    private void drawEdges(List<Edge<Integer>> allEdges) {
        for (Edge edge : allEdges) {
            Graphics g = panelDraw.getGraphics();
            Graphics2D g2 = (Graphics2D) g;
            if (edgesOfShortestPath.contains(edge)) {
                edge.getLine().color = new Color(220, 0, 0);
            } else {
                edge.getLine().color = new Color(75, 0, 0);
            }
            g2.setColor(edge.getLine().color);
            g2.setStroke(new BasicStroke(5));
            g2.drawLine(edge.getLine().getStartX(), edge.getLine().getStartY(), edge.getLine().getEndX(), edge.getLine().getEndY());
            g.setColor(new Color(0, 0, 0));
            g.setFont(new Font("Viking-Normal", 20, 20));
            if (edge.getWeight() > 0) {
                g.drawString("" + edge.getWeight(), (edge.getLine().getEndX() + edge.getLine().getStartX()) / 2 + 5, ((edge.getLine().getEndY() + edge.getLine().getStartY()) / 2) - 3);
            }
            g.setFont(new Font("Viking-Normal", 25, 25));
            g.setColor(new Color(0, 0, 0));
            g.drawString("V" + edge.getVertex1().getId(), (int) edge.getVertex1().getLocation().getX() + 10, (int) edge.getVertex1().getLocation().getY() + 41);
            g.drawString("V" + edge.getVertex2().getId(), (int) edge.getVertex2().getLocation().getX() + 10, (int) edge.getVertex2().getLocation().getY() + 41);
            panelDraw.paintComponents(g2);
        }
    }

    private void drawDirectedEdges(List<Edge<Integer>> allEdges) {
        for (Edge edge : allEdges) {
            Graphics g = panelDraw.getGraphics();
            Graphics2D g2 = (Graphics2D) g;
            if (edgesOfShortestPath.contains(edge)) {
                edge.getLine().color = new Color(220, 0, 0);
            } else {
                edge.getLine().color = new Color(75, 0, 0);
            }
            g2.setColor(edge.getLine().color);
            g2.setStroke(new BasicStroke(5));
            drawArrow(g2, edge.getLine().getStartX(), edge.getLine().getStartY(), edge.getLine().getEndX(), edge.getLine().getEndY(), edge.getLine().color);
            g.setColor(new Color(0, 0, 0));
            g.setFont(new Font("Viking-Normal", 20, 20));
            if (edge.getWeight() > 0) {
                g.drawString("" + edge.getWeight(), (edge.getLine().getEndX() + edge.getLine().getStartX()) / 2 + 5, ((edge.getLine().getEndY() + edge.getLine().getStartY()) / 2) - 3);
            }
            g.setFont(new Font("Viking-Normal", 25, 25));
            g.setColor(new Color(0, 0, 0));
            g.drawString("V" + edge.getVertex1().getId(), (int) edge.getVertex1().getLocation().getX() + 10, (int) edge.getVertex1().getLocation().getY() + 41);
            g.drawString("V" + edge.getVertex2().getId(), (int) edge.getVertex2().getLocation().getX() + 10, (int) edge.getVertex2().getLocation().getY() + 41);
            panelDraw.paintComponents(g2);
        }
    }

    private void drawVertexes(Map<Long, Vertex<Integer>> allVertexMap) {
        //********************************************
        Iterator it = allVertexMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            Vertex<Integer> v = (Vertex<Integer>) pair.getValue();
            Graphics g = panelDraw.getGraphics();
            if (v == selectedVertex) {
                g.setColor(new Color(0, 100, 0));
                g.fillOval(v.getLocation().x, v.getLocation().y, 60, 60);
                g.setColor(new Color(120, 0, 0));
                g.fillOval(v.getLocation().x + 4, v.getLocation().y + 4, 52, 52);

                g.setColor(new Color(0, 0, 0));
                g.setFont(new Font("Viking-Normal", 25, 25));
                g.drawString("V" + v.getId(), (int) v.getLocation().getX() + 10, (int) v.getLocation().getY() + 41);
            } else {
                g.setColor(new Color(0, 0, 0));
                g.fillOval(v.getLocation().x, v.getLocation().y, 60, 60);
                g.setColor(new Color(75, 0, 0));
                g.fillOval(v.getLocation().x + 4, v.getLocation().y + 4, 52, 52);
                g.setColor(new Color(0, 0, 0));
                g.setFont(new Font("Viking-Normal", 25, 25));
                g.drawString("V" + v.getId(), (int) v.getLocation().getX() + 10, (int) v.getLocation().getY() + 41);
            }
            panelDraw.paintComponents(g);
        }
        //********************************************

//        for (long i = 1; i < allVertexMap.size() + 1; i++) {
//            if (allVertexMap.get(i) == null) {
//                continue;
//            }
//            Graphics g = panelDraw.getGraphics();
//            g.setColor(new Color(0, 0, 0));
//            g.fillOval(allVertexMap.get(i).getLocation().x, allVertexMap.get(i).getLocation().y, 60, 60);
//            g.setColor(new Color(75, 0, 0));
//            g.fillOval(allVertexMap.get(i).getLocation().x + 4, allVertexMap.get(i).getLocation().y + 4, 52, 52);
//            debug(allVertexMap.get(i).toString());
//            g.setColor(new Color(0, 0, 0));
//            g.setFont(new Font("Viking-Normal", 25, 25));
//            g.drawString("V" + allVertexMap.get(i).getId(), (int) allVertexMap.get(i).getLocation().getX() + 10, (int) allVertexMap.get(i).getLocation().getY() + 41);
//            panelDraw.paintComponents(g);
//        }
    }

    private void drawSingleVertex(Vertex<Integer> v) {
        Graphics g = panelDraw.getGraphics();
        g.setColor(new Color(0, 0, 0));
        g.fillOval(v.getLocation().x, v.getLocation().y, 60, 60);
        g.setColor(new Color(75, 0, 0));
        g.fillOval(v.getLocation().x + 4, v.getLocation().y + 4, 52, 52);

        g.setColor(new Color(0, 0, 0));
        g.setFont(new Font("Viking-Normal", 25, 25));
        g.drawString("V" + v.getId(), (int) v.getLocation().getX() + 10, (int) v.getLocation().getY() + 41);
        panelDraw.paintComponents(g);
    }

    private void drawSingleVertex(Vertex<Integer> v, int x, int y) {
        Graphics g = panelDraw.getGraphics();
        g.setColor(new Color(0, 0, 0));
        g.fillOval(x, y, 30, 30);
        g.setColor(new Color(75, 0, 0));
        g.fillOval(x + 2, y + 2, 26, 26);

        g.setColor(new Color(0, 0, 0));
        g.setFont(new Font("Viking-Normal", 12, 12));
        g.drawString("V" + v.getId(), (int) x + 5, (int) y + 42);
        panelDraw.paintComponents(g);
    }

    private void drawSpanningTree(List<Edge<Integer>> edges) {

        for (Edge e : edges) {
            drawSingleVertex(e.getVertex1());
            drawSingleVertex(e.getVertex2());
        }
        drawEdges(edges);
    }

    void drawArrow(Graphics g1, int x1, int y1, int x2, int y2, Color color) {
        Graphics2D g = (Graphics2D) g1.create();

        double dx = x2 - x1, dy = y2 - y1;
        double angle = Math.atan2(dy, dx);
        int len = (int) Math.sqrt(dx * dx + dy * dy);
        AffineTransform at = AffineTransform.getTranslateInstance(x1, y1);
        at.concatenate(AffineTransform.getRotateInstance(angle));
        g.transform(at);

        // Draw horizontal arrow starting in (0, 0)
        g.setStroke(new BasicStroke(5));
        g.setColor(color);
        g.drawLine(0, 0, len, 0);
        g.setColor(new Color(color.getRed() - 75, 0, 0));
        g.fillPolygon(new int[]{len - 20, len - ARR_SIZE - 50, len - ARR_SIZE - 50, len - 20},
                new int[]{0, -ARR_SIZE, ARR_SIZE, 0}, 4);
    }

    private void drawSelectedSingleVertex(Vertex<Integer> v) {
        Graphics g = panelDraw.getGraphics();
        g.setColor(new Color(0, 100, 0));
        g.fillOval(v.getLocation().x, v.getLocation().y, 60, 60);
        g.setColor(new Color(120, 0, 0));
        g.fillOval(v.getLocation().x + 4, v.getLocation().y + 4, 52, 52);

        g.setColor(new Color(0, 0, 0));
        g.setFont(new Font("Viking-Normal", 25, 25));
        g.drawString("V" + v.getId(), (int) v.getLocation().getX() + 10, (int) v.getLocation().getY() + 41);

        panelDraw.paintComponents(g);
    }

    void load(Graph graph) {
        myGraph = graph;
        if (myGraph.isWeighted) {
            weighted = true;
        }
        JOptionPane.showMessageDialog(null, "Graph Loaded Successfuly!");
        if (myGraph == null) {
            return;
        }
        if (!myGraph.isDirected) {
            drawGraph(myGraph);
        } else if (myGraph.isDirected) {
            drawDirectedGraph(myGraph);
        }

    }

    private boolean validateForVertex(MouseEvent evt) {
        Vertex v;
        HashMap<Long, Vertex<Integer>> vertexMap = (HashMap<Long, Vertex<Integer>>) myGraph.getAllVertexMap();

        Iterator it = vertexMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            v = (Vertex<Integer>) pair.getValue();
            if (v == null) {
            } else if ((evt.getX() > v.getLocation().x - 30 && evt.getX() < v.getLocation().x + 90)
                    && (evt.getY() > v.getLocation().y - 30 && evt.getY() < v.getLocation().y + 90)) {
                Soundplayer.playSound("error.wav");
                return false;
            }
        }
        return true;
    }

    private boolean checkCycle() {

        Vertex v;
        HashMap<Long, Vertex<Integer>> vertexMap = (HashMap<Long, Vertex<Integer>>) myGraph.getAllVertexMap();

        Iterator it = vertexMap.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();
            v = (Vertex<Integer>) pair.getValue();
            if (v == null) {
            }
            List<Edge> edges = v.getEdges();
            for (Edge edge : edges) {

                if (edge.getVertex1().getId() == v.getId()) {
                    DAGShortestPath x = new DAGShortestPath();
                    System.out.println(myGraph);
                    //  JOptionPane.showMessageDialog(null, "from V"+edge.getVertex2().getId() + " | " + x.shortestPath(myGraph, edge.getVertex2()));
                    if (x.shortestPath(myGraph, edge.getVertex2(), deletedVertexes).get(v) == null) {
                        continue;
                    }
                    // if( (int)x.shortestPath(myGraph, edge.getVertex2()).get(v) > 0)
                    return true;
                }

            }
        }

        return false;
    }

}
